(ns conduit.infra.middleware.session.sqlite
  (:require
   [ring.middleware.session.store :refer [SessionStore] :as sesh]
   [integrant.core :as ig]
   [taoensso.timbre :as timbre]
   [taoensso.nippy :as nippy]
   [next.jdbc :as jdbc]
   [hugsql.core :as hugsql])
  (:import [java.util UUID]))

; Generated by hugsql
(declare get-session-by-id)
(declare create-session-table)
(declare update-session)
(declare insert-session)
(declare delete-session-by-id)
(hugsql/def-db-fns "conduit/infra/middleware/session/store.sql")

(defn defreeze [val]
  (when val
    (nippy/thaw val)))

(deftype XtdbStore [ds]
  SessionStore
  (read-session [_ key]
    (when (not (nil? key))
      (jdbc/with-transaction [tx ds]
        (-> (get-session-by-id tx {:id key})
            (vals)
            (first)
            (defreeze)))))

  (write-session [_ key val]
    (let [key* (or key (str key (UUID/randomUUID)))]
      (jdbc/with-transaction [tx ds]
        ((if key 
           update-session 
           insert-session) tx {:id key* :data (nippy/freeze val)})
        key*)))

  (delete-session [_ key]
    (jdbc/with-transaction [tx ds]
      (delete-session-by-id tx {:id key})
      nil)))

(defmethod ig/init-key :infra.middleware.session/sqlite [_ {:keys [ds]}]
  (timbre/info "Initializing sqlite session store")
  (->XtdbStore ds))

(comment
  (let [ds (jdbc/get-datasource {:dbtype "sqlite" :dbname "test.sqlite"})
        store (->XtdbStore ds)]
    (create-session-table ds)
    (sesh/read-session store "foo"))
  
  (let [ds (jdbc/get-datasource {:dbtype "sqlite" :dbname "test.sqlite"})
        store (->XtdbStore ds)
        _ (create-session-table ds)
        key (sesh/write-session store nil {:foo "bar"})]
    (println :key key)
    (println (sesh/read-session store key))
    (sesh/delete-session store key)
    (println (sesh/read-session store key))))
  
